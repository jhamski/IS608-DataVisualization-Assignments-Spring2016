CaseA <- execModelLoop(100, 500, maxIterations, "result")
head(CaseA)
f <- ggplot(CaseA, aes(x=n, y=pnc))+geom_line()
f
CaseA
library(ggplot2)
model <- function(p, q){
px <- p - (0.1 * (q - 500))
return (px)
}
model1 <- function(p, q){
qx <- q + (0.2 * (p - 100))
return (qx)
}
execModelLoop <- function(pnaught, qnaught, maxN, caseId)
{
pnc <- c()
pnc[1] <- pnaught
qnc <- c()
qnc[1] <- qnaught
for(n in 1:maxN)
{
pnc[n + 1] <- model(pnc[n], qnc[n])
qnc[n + 1] <- model1(pnc[n], qnc[n])
}
df <- data.frame(case=rep_len(caseId, maxN+1), n=1:(maxN+1), pnc, qnc)
return (df)
}
maxIterations <- 100
CaseA <- execModelLoop(200, 500, maxIterations, "result")
head(CaseA)
f <- ggplot(CaseA, aes(x=n, y=pnc))+geom_line()
f
price <- function(P_n, Q_n) {
price.calc <- (P_n - (k.price*(Q_n - equ.price)))
return(price.calc)}
quantity <- function(P_n, Q_n) {
quantity.calc <- (Q_n - (k.quant*(P_n - equ.quant)))
return(quantity.calc)}
model.call <- function(P_n1, Q_n1){
for (i in 1:iter) {
P_n <- c()
P_n[1] <- P_n1
Q_n <- c()
Q_n[1] <- Q_n1
price[n + 1] <- price(P_n[n], Q_n[n])
quantity[n + 1] <- quantity(P_n[n], Q_n[n])
}
sim <- seq(1,iter + 1)
econ.model <- as.data.frame(cbind(P_n, Q_n, sim))
return(econ.model)}
econ.model(200, 500)
model.call(200, 500)
model.call <- function(P_n1, Q_n1){
for (i in 1:iter) {
P_n <- c()
P_n[1] <- P_n1
Q_n <- c()
Q_n[1] <- Q_n1
price[n + 1] <- price(P_n[i], Q_n[i])
quantity[n + 1] <- quantity(P_n[i], Q_n[i])
}
sim <- seq(1,iter + 1)
econ.model <- as.data.frame(cbind(P_n, Q_n, sim))
return(econ.model)}
model.call(200, 500)
# set parameters
iter = 100
k.price = 0.1
k.quant = 0.2
equ.price = 500
equ.quant = 100
# model
price <- function(P_n, Q_n) {
price.calc <- (P_n - (k.price*(Q_n - equ.price)))
return(price.calc)}
quantity <- function(P_n, Q_n) {
quantity.calc <- (Q_n - (k.quant*(P_n - equ.quant)))
return(quantity.calc)}
model.call <- function(P_n1, Q_n1){
for (i in 1:iter) {
P_n <- c()
P_n[1] <- P_n1
Q_n <- c()
Q_n[1] <- Q_n1
price[i + 1] <- price(P_n[i], Q_n[i])
quantity[i + 1] <- quantity(P_n[i], Q_n[i])
}
sim <- seq(1,iter + 1)
econ.model <- as.data.frame(cbind(P_n, Q_n, sim))
return(econ.model)}
model.call(200, 500)
# set parameters
iter = 100
k.price = 0.1
k.quant = 0.2
equ.price = 500
equ.quant = 100
# model
price <- function(P_n, Q_n) {
price.calc <- (P_n - (k.price*(Q_n - equ.price)))
return(price.calc)}
quantity <- function(P_n, Q_n) {
quantity.calc <- (Q_n - (k.quant*(P_n - equ.quant)))
return(quantity.calc)}
model.call <- function(P_n1, Q_n1){
for (i in 1:iter) {
P_n <- c()
P_n[1] <- P_n1
Q_n <- c()
Q_n[1] <- Q_n1
P_n[i + 1] <- price(P_n[i], Q_n[i])
Q_n[i + 1] <- quantity(P_n[i], Q_n[i])
}
sim <- seq(1,iter + 1)
econ.model <- as.data.frame(cbind(P_n, Q_n, sim))
return(econ.model)}
model.call(200, 500)
quantity(200, 500)
price(200, 500)
# set parameters
iter = 100
k.price = 0.1
k.quant = 0.2
equ.price = 500
equ.quant = 100
# model
price <- function(P_n, Q_n) {
price.calc <- (P_n - (k.price*(Q_n - equ.price)))
return(price.calc)}
quantity <- function(P_n, Q_n) {
quantity.calc <- (Q_n - (k.quant*(P_n - equ.quant)))
return(quantity.calc)}
model.call <- function(P_n1, Q_n1){
for (i in 1:iter) {
P_n <- c()
P_n[1] <- P_n1
Q_n <- c()
Q_n[1] <- Q_n1
print(i)
#P_n[i + 1] <- price(P_n[i], Q_n[i])
#Q_n[i + 1] <- quantity(P_n[i], Q_n[i])
}
sim <- seq(1,iter + 1)
#econ.model <- as.data.frame(cbind(P_n, Q_n, sim))
#return(econ.model)}
}
model.call(200, 500)
# set parameters
iter = 100
k.price = 0.1
k.quant = 0.2
equ.price = 500
equ.quant = 100
# model
price <- function(P_n, Q_n) {
price.calc <- (P_n - (k.price*(Q_n - equ.price)))
return(price.calc)}
quantity <- function(P_n, Q_n) {
quantity.calc <- (Q_n - (k.quant*(P_n - equ.quant)))
return(quantity.calc)}
model.call <- function(P_n1, Q_n1){
for (i in 1:iter) {
P_n <- c()
P_n[1] <- P_n1
Q_n <- c()
Q_n[1] <- Q_n1
print(P_n[i])
#P_n[i + 1] <- price(P_n[i], Q_n[i])
#Q_n[i + 1] <- quantity(P_n[i], Q_n[i])
}
sim <- seq(1,iter + 1)
#econ.model <- as.data.frame(cbind(P_n, Q_n, sim))
#return(econ.model)
}
model.call(200, 500)
# set parameters
iter = 100
k.price = 0.1
k.quant = 0.2
equ.price = 500
equ.quant = 100
# model
price <- function(P_n, Q_n) {
price.calc <- (P_n - (k.price*(Q_n - equ.price)))
return(price.calc)}
quantity <- function(P_n, Q_n) {
quantity.calc <- (Q_n - (k.quant*(P_n - equ.quant)))
return(quantity.calc)}
model.call <- function(P_n1, Q_n1){
P_n <- c()
P_n[1] <- P_n1
Q_n <- c()
Q_n[1] <- Q_n1
for (i in 1:iter) {
P_n[i + 1] <- price(P_n[i], Q_n[i])
Q_n[i + 1] <- quantity(P_n[i], Q_n[i])
}
sim <- seq(1,iter + 1)
econ.model <- as.data.frame(cbind(P_n, Q_n, sim))
return(econ.model)
}
model.call(200, 600)
case.A <- model.call(200, 500)
ggplot(case.A, aes(sim)) +
geom_line(aes(y = P_n, colour = "Price")) +
geom_line(aes(y = Q_n, colour = "Quantity"))
case.A <- model.call(200, 600)
ggplot(case.A, aes(sim)) +
geom_line(aes(y = P_n, colour = "Price")) +
geom_line(aes(y = Q_n, colour = "Quantity"))
case.C <- model.call(100, 600)
ggplot(case.C, aes(sim)) +
geom_line(aes(y = P_n, colour = "Price")) +
geom_line(aes(y = Q_n, colour = "Quantity"))
case.D <- model.call(100, 400)
ggplot(case.D, aes(sim)) +
geom_line(aes(y = P_n, colour = "Price")) +
geom_line(aes(y = Q_n, colour = "Quantity"))
# set parameters
iter = 100
k.price = 0.1
k.quant = 0.2
equ.price = 500
equ.quant = 100
# model
price <- function(P_n, Q_n) {
price.calc <- P_n - (0.1 * (Q_n - 500))
return(price.calc)}
quantity <- function(P_n, Q_n) {
Q_n <- Q_n + (0.2 * (P_n - 100))
return(quantity.calc)}
model.call <- function(P_n1, Q_n1){
P_n <- c()
P_n[1] <- P_n1
Q_n <- c()
Q_n[1] <- Q_n1
for (i in 1:iter) {
P_n[i + 1] <- price(P_n[i], Q_n[i])
Q_n[i + 1] <- quantity(P_n[i], Q_n[i])
}
sim <- seq(1,iter + 1)
econ.model <- as.data.frame(cbind(P_n, Q_n, sim))
return(econ.model)
}
# set parameters
iter = 100
k.price = 0.1
k.quant = 0.2
equ.price = 500
equ.quant = 100
# model
price <- function(P_n, Q_n) {
price.calc <- P_n - (0.1 * (Q_n - 500))
return(price.calc)}
quantity <- function(P_n, Q_n) {
quantity.calc <- Q_n + (0.2 * (P_n - 100))
return(quantity.calc)}
model.call <- function(P_n1, Q_n1){
P_n <- c()
P_n[1] <- P_n1
Q_n <- c()
Q_n[1] <- Q_n1
for (i in 1:iter) {
P_n[i + 1] <- price(P_n[i], Q_n[i])
Q_n[i + 1] <- quantity(P_n[i], Q_n[i])
}
sim <- seq(1,iter + 1)
econ.model <- as.data.frame(cbind(P_n, Q_n, sim))
return(econ.model)
}
case.A <- model.call(200, 600)
ggplot(case.A, aes(sim)) +
geom_line(aes(y = P_n, colour = "Price")) +
geom_line(aes(y = Q_n, colour = "Quantity"))
case.B <- model.call(200, 600)
ggplot(case.B, aes(sim)) +
geom_line(aes(y = P_n, colour = "Price")) +
geom_line(aes(y = Q_n, colour = "Quantity"))
case.C <- model.call(100, 600)
ggplot(case.C, aes(sim)) +
geom_line(aes(y = P_n, colour = "Price")) +
geom_line(aes(y = Q_n, colour = "Quantity"))
case.D <- model.call(100, 400)
ggplot(case.D, aes(sim)) +
geom_line(aes(y = P_n, colour = "Price")) +
geom_line(aes(y = Q_n, colour = "Quantity"))
case.A <- model.call(100, 500)
ggplot(case.A, aes(sim)) +
geom_line(aes(y = P_n, colour = "Price")) +
geom_line(aes(y = Q_n, colour = "Quantity"))
n = seq(1,16,1)
a_n = c(3,6,11,21,32,47,65,87,112,140,171,204,241,282,325,376)
delta_a <- diff(a_n)
plot(x = n, y = a_n)
braking.model <- lm(delta_a ~ n[2:16] )
plot(x = n[2:16], y = delta_a, xlab='Speed', ylab='Change in Braking Distance')
abline(braking.model)
k <- as.numeric(braking.model$coefficients[2])
print(k)
model <- function(n, a, k){
an <- k * n + a
return(an)}
model.result <- NULL
model.result[1] <- 0
for (i in 2:length(a_n)) {
model.result[i] <- model(i, model.result[i - 1], k)}
model.result
library(ggplot)
n <- 1:16
a_naught <- c(3,6,11,21,32,47,65,87,112,140,171,204,241,282,325,376)
mph <- (n * 5)
delta_naught <- c()
d_naught <- NA
for(i in 1:length(a_naught))
{
delta_naught[i] <- a_naught[i] - a_naught[i - 1]
}
data <- data.frame(n, mph, a_naught, delta_naught)
p1 <- ggplot(data, aes(x=delta_naught, y=n)) + geom_line()
p1
change_delta <- max(data$delta_naught, na.rm=TRUE)
change_delta_n <- max(data$n)
slope <- change_delta/change_delta_n
a_naught <- c(3,6,11,21,32,47,65,87,112,140,171,204,241,282,325,376)
model <- function(n, a, slope)
{
an <- slope * n + a
return(an)
}
m <- c()
m[1] <- 0
for(i in 2:length(a_naught))
{
m[i] <- model(i, m[i-1], slope)
}
data1 <- cbind(data, m)
data1
data1$err <- data1$a_n - data1$m
data1err <- ggplot(data=data1, aes(x=n)) + geom_point(color="red", aes(y=err))
data1err
m
model.result
slope
print(k)
?abs
residuals <- abs(a_n - model.result)
plot(residuals)
?read.csv
data <- read.csv('https://github.com/jlaurito/CUNY_IS608/blob/master/lecture1/data/inc5000_data.csv')
data <- read.csv(url("https://github.com/jlaurito/CUNY_IS608/blob/master/lecture1/data/inc5000_data.csv")
)
data <- read.csv(url("https://github.com/jlaurito/CUNY_IS608/blob/master/lecture1/data/inc5000_data.csv"))
data <- read.csv(url("http://github.com/jlaurito/CUNY_IS608/blob/master/lecture1/data/inc5000_data.csv"))
read_csv
?read_csv
library(readr)
data <- read_csv("inc5000_data.csv")
setwd("~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 1")
data <- read_csv("inc5000_data.csv")
str(data)
library(readr)
library(ggplot2)
library(dplyr)
str(data)
library(readr)
library(ggplot2)
library(dplyr)
?count
count(data)
data %>% group_by(State) %>% tally(sort=TRUE) -> State.count
State.count
ggplot(State.count, aes(x=n, y=State)) + geom_bar()
ggplot(State.count, aes(x=n, y=State))
ggplot(State.count, aes(x=n, y=State)) + geom_bar()
?geom_bar
ggplot(State.count, aes(x=State, y=b)) + geom_bar()
ggplot(State.count, aes(x=State, y=n)) + geom_bar()
ggplot(State.count, aes(x=State, y=n)) + geom_bar() + coord_flip()
library(readr)
library(ggplot2)
library(dplyr)
data <- read_csv("inc5000_data.csv")
str(data)
data %>% group_by(State) %>% tally(sort = T) -> State.count
ggplot(State.count, aes(x=State, y=n)) + geom_bar() + coord_flip()
library(readr)
library(ggplot2)
library(dplyr)
data <- read_csv("inc5000_data.csv")
str(data)
data %>% group_by(State) %>% tally(sort = T) -> State.count
State.count$State %>% factor(levels=rev(State.count$State)) -> State.count$State
ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5)) + coord_flip()
ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black") + coord_flip()
ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0.8) + coord_flip()
ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=1.0) + coord_flip()
ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0) + coord_flip()
?scale_fill_manual
ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0) + scale_fill_manual("red") + coord_flip()
ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0) + scale_fill_manual(values("red")) + coord_flip()
ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0.1) + coord_flip()
ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0.25) + coord_flip()
map <- ggplot() + geom_map(data=State.count, aes(map_id=State,fill=n))
map <- ggplot() + geom_map(data=State.count, map=us, aes(map_id=State,fill=n))
us <- map_data("state")
map <- ggplot() + geom_map(data=State.count, map=us, aes(map_id=State,fill=n))
map
ggplot() + geom_map(data=State.count, map=us, aes(map_id=State,fill=n))
ggplot(data=State.count, map=us, aes(map_id=State,fill=n)) + geom_map()
us
ggplot() + geom_map(data=State.count, map=us, aes(x=long, y=lat, map_id=State,fill=n))
ggplot() + geom_map(data=State.count, map=us, aes(map_id=State,fill=n))
data %>% group_by(State) %>% tally(sort = T) -> State.count
State.count$State %>% factor(levels = rev(State.count$State)) -> State.count$State
ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0.25) + coord_flip()
State.count
State.count[3]
State.count[3,]
State.count[3,]
str(data)
ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0.25) + coord_flip() + lab(title="Distribution of companies in the dataset by State")
ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0.25) + coord_flip() + labs(title="Distribution of companies in the dataset by State")
state.count <- state.count + coord_flip() + labs(title="Distribution of companies in the dataset by State", x="Count of Companies in State", y="State")
data %>% group_by(State) %>% tally(sort = T) -> State.count
State.count$State %>% factor(levels = rev(State.count$State)) -> State.count$State
state.count <- ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0.25)
state.count <- state.count + coord_flip() + labs(title="Distribution of companies in the dataset by State", x="Count of Companies in State", y="State")
state.count
data %>% group_by(State) %>% tally(sort = T) -> State.count
State.count$State %>% factor(levels = rev(State.count$State)) -> State.count$State
state.count <- ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0.25)
state.count <- state.count + coord_flip() + labs(title="Distribution of companies in the dataset by State", y="Count of Companies in State", x="State")
state.count
data %>% group_by(State) %>% tally(sort = T) -> State.count
State.count$State %>% factor(levels = rev(State.count$State)) -> State.count$State
state.count <- ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0.25)
+ labs(title="Distribution of companies in the dataset by State", y="Count of Companies in State", x="State")
+ coord_flip()
state.count
data %>% group_by(State) %>% tally(sort = T) -> State.count
State.count$State %>% factor(levels = rev(State.count$State)) -> State.count$State
state.count <- ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0.25)
+ labs(title="Distribution of companies in the dataset by State", y="Count of Companies in State", x="State")
+ coord_flip()
state.count
data %>% group_by(State) %>% tally(sort = T) -> State.count
State.count$State %>% factor(levels = rev(State.count$State)) -> State.count$State
state.count <- ggplot(State.count, aes(x=State, y=n)) + geom_bar(stat="identity", position = position_dodge(width=0.5), color = "black", alpha=0.25) + labs(title="Distribution of companies in the dataset by State", y="Count of Companies in State", x="State") + coord_flip()
state.count
str(data)
?complete.cases
group_by(Industry) %>%
asdf
NY.companies <- data %>%
filter(State="NY") %>%
group_by(Industry) %>%
summarize(ave = mean(Employees))
NY.companies <- data %>%
filter(State=="NY") %>%
group_by(Industry) %>%
summarize(ave = mean(Employees))
NY.companies
str(data)
data$Employees
NY.employment <- data %>%
filter(State=="NY") %>%
filter(Employees!is.na)
group_by(Industry) %>%
summarize(ave = mean(Employees))
NY.employment <- data %>%
filter(State=="NY") %>%
filter(Employees!is.na) %>%
group_by(Industry) %>%
summarize(ave = mean(Employees))
NY.employment <- data %>%
filter(State=="NY") %>%
filter(Employees!is.na) %>%
group_by(Industry) %>%
summarize(ave = mean(Employees))
NY.employment <- data %>%
filter(State=="NY") %>%
filter(Employees!is.na) %>%
group_by(Industry) %>%
summarize(ave = mean(Employees))
NY.employment <- data %>%
filter(State=="NY") %>%
#filter(Employees!is.na) %>%
group_by(Industry) %>%
summarize(ave = mean(Employees))
NY.employment <- data %>%
filter(State=="NY") %>%
filter(Employees!is.na)
NY.employment <- data %>%
filter(State=="NY") %>%
filter(Employees!is.na)
str(data)
NY.employment <- data %>%
filter(State=="NY") %>%
filter(Employees !is.na)
NY.employment <- data %>%
filter(State=="NY") %>%
filter(Employees ! is.na)
NY.employment <- data %>%
filter(State=="NY") %>%
filter(Employees != "NA")
NY.employment <- data %>%
filter(State=="NY") %>%
filter(Employees != "NA") %>%
group_by(Industry) %>%
summarize(ave = mean(Employees))
NY.employment
