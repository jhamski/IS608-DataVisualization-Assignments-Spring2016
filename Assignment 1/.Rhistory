square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
start <- ifelse(square.len > 4, (square.len / 2) - 1, square.len / 2)
stop <- ifelse(square.len >6, start + 3, start + 2)
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - (seed.len / 2)
stop <- (square.len / 2) + (seed.len / 2)
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
nchar(555, type="chars")
nchar(553335, type="chars")
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - (seed.len / 2)
stop <- (square.len / 2) + (seed.len / 2)
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
middle.sq
middle.sq(2041)
seed
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - 1
stop <- (square.len / 2) + 2
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - 1
stop <- (square.len / 2) + 1
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
print(nchar(seed, type="chars"))
start <- (square.len / 2) - 1
stop <- (square.len / 2) + 2
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - (seed.len / 2)
stop <- (square.len / 2) + (seed.len / 2)
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - 1 # (seed.len / 2)
stop <- (square.len / 2) + 1#(seed.len / 2)
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
print(seed.len / 2)
start <- (square.len / 2) - 1 # (seed.len / 2)
stop <- (square.len / 2) + 1#(seed.len / 2)
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
print(square.len / 2)
start <- (square.len / 2) - 1 # (seed.len / 2)
stop <- (square.len / 2) + 1#(seed.len / 2)
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
print(square.len)
start <- (square.len / 2) - 1 # (seed.len / 2)
stop <- (square.len / 2) + 1#(seed.len / 2)
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - 1
stop <- (square.len / 2) + 2
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - 1
stop <- start + (square.len / 2) + 2
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - 1
stop <- start + 2
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - 1
stop <- start + square.len /2 + 1
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - 1
stop <- start + square.len/2
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - 1
stop <- start + 1
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - 1
stop <- start + square.len
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - 1
stop <- start + square.len / 2
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
seed
middle.sq <- function(seed){
square <- seed ** 2
square.len <- nchar(square, type="chars")
square <- toString(square)
square <-ifelse(square.len %%2 == 0, square, paste("0", square, sep = ""))
square.len <- nchar(square, type="chars")
seed.len <- nchar(seed, type = "chars")
start <- (square.len / 2) - 1
stop <- (square.len) / 2 + 1
next.num <- substr(square, start, stop)
next.num <- as.numeric(next.num)
return(next.num)
}
# I always have a hard time doing recursive functions in R...
seed = 2041
for (i in 1:12){
new <- middle.sq(seed[i])
seed <- c(seed, new)
}
_
test1 <- matrix(data = c(1,0), nrow = 1, ncol= 2)
testt1
test1
test1[0]
test1[1]
test1[2]
a <- c(0,1)
a[1]
1[2]
a
a[1]
a[,1]
a[1,
]
dining.model <- function(gs){
mat.result <- matrix(data = c(NULL, NULL), nrow = 1, ncol= 2)
mat.result[1] <- 0.25*gs[1] + 0.07*gs[2]
mat.result[2] <- 0.93*gs[2] + 0.75*gs[1]
return(mat.result)
}
start.conditions <- matrix(data = c(1,0), nrow = 1, ncol= 2)
dining.model(start.conditions)
dining.model <- function(gs){
mat.result <- matrix(data = c(0, 0), nrow = 1, ncol= 2)
mat.result[1] <- 0.25*gs[1] + 0.07*gs[2]
mat.result[2] <- 0.93*gs[2] + 0.75*gs[1]
return(mat.result)
}
start.conditions <- matrix(data = c(1,0), nrow = 1, ncol= 2)
dining.model(start.conditions)
iters <- 10
for(1 in 1:iters){
print(i)
}
for(i in 1:iters){
print(i)
}
dining.behavior <- matrix(data = c(1,0), nrow = 1, ncol = 2)
iters <- 10
for(i in 1:iters){
dining.behavior[i+1] <- dining.model(dining.behavior[i])
}
dining.behavior[1]
dining.behavior[1,]
dining.behavior[1:]
dining.behavior[,1]
dining.behavior[,:]
str(dining.behavior)
dining.behavior <- matrix(data = c(1,0), nrow = 1, ncol = 2)
dining
dining.behavior
dining.behavior[1,]
for(i in 1:iters){
dining.behavior[i+1,] <- dining.model(dining.behavior[i,])
}
dining.behavior
dining.behavior[1,]
dining.behavior[2,] <- dining.behavior[1,]
dining.behavior <- matrix(data = c(1,0), nrow = 1, ncol = 2)
iters <- 10
for(i in 1:iters){
dining.behavior <- rbind(dining.behavior, dining.model(dining.behavior[i,])
}
dining.behavior <- rbind(dining.behavior, dining.behavior[1,])
dining.behavior
for(i in 1:iters) {
dining.behavior <- rbind(dining.behavior, dining.model(dining.behavior[i,]))}
dining.behavior
dining.behavior <- cbind(1:iters, dining.behavior)
1:iters
dining.model <- function(gs){
mat.result <- matrix(data = c(0, 0), nrow = 1, ncol = 2)
mat.result[1] <- 0.25*gs[1] + 0.07*gs[2]
mat.result[2] <- 0.93*gs[2] + 0.75*gs[1]
return(mat.result)
}
dining.behavior <- matrix(data = c(1,0), nrow = 1, ncol = 2)
iters <- 10
for(i in 1:iters) {
dining.behavior <- rbind(dining.behavior, dining.model(dining.behavior[i,]))}
dining.behavior <- cbind(1:iters, dining.behavior)
dining.behavior
dining.model <- function(gs){
mat.result <- matrix(data = c(0, 0), nrow = 1, ncol = 2)
mat.result[1] <- 0.25*gs[1] + 0.07*gs[2]
mat.result[2] <- 0.93*gs[2] + 0.75*gs[1]
return(mat.result)
}
dining.behavior <- matrix(data = c(1,0), nrow = 1, ncol = 2)
iters <- 10
for(i in 1:iters) {
dining.behavior <- rbind(dining.behavior, dining.model(dining.behavior[i,]))}
dining.behavior <- cbind(0:iters, dining.behavior)
dining.behavior
library(knitr)
keyboard <- 0.9999
mouse <- 0.9998
ss.2 <- keyboard + mouse - (keyboard * mouse)
floppy.a <- 0.995
HD <- 0.995
CD <- 0.999
ss.3 <- floppy.a + HD + CD - (floppy.a * HD * CD)
ss.2 <- keyboard + mouse - (keyboard * mouse)
ss.3 <- floppy.a + HD + CD - (floppy.a * HD * CD)
printer <- 0.995
color.laser <- 0.999
ss.4 <- printer + color.laser - (printer * color.laser)
floppy.a <- 0.995
HD <- 0.995
CD <- 0.999
ss.3 <- 1-((1 - floppy.a) * (1 - HD) * (1 - CD))
t <- matrix(c(0.25, 0.07, 0.75, 0.93), nrow =2, ncol = 2)
t
eigen(t)
solve(t)
