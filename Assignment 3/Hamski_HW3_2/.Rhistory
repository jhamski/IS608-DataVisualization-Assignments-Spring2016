group_by(ICD.Chapter, State) %>%
do(mod = lm(Crude.Rate ~ Year, data = .)) %>%
mutate(Slope = summary(mod)$coeff[2]) %>%
select(-mod)
View(disease.state.groups)
disease.state.groups <- complete.disease.data %>%
arrange(Year) %>%
group_by(ICD.Chapter, State) %>%
do(mod = lm(Crude.Rate ~ Year, data = .)) %>%
mutate(Slope = summary(mod)$coeff[2])
View(disease.state.groups)
original.data <- read_csv("cleaned-cdc-mortality-1999-2010.csv")
#Q1
#should be about 300 million
All.states.pop.2010 <- original.data %>%
filter(Year == 2010) %>%
select(State, Population) %>%
group_by(State) %>%
summarize(average.pop = mean(Population)) %>%
select(average.pop) %>%
sum()
All.states.2010 <- original.data %>%
filter(Year == 2010) %>%
group_by(ICD.Chapter) %>%
summarize(Deaths = sum(Deaths)) %>%
mutate(State = "US")
All.states.2010$Crude.Rate <- All.states.2010$Deaths / All.states.pop.2010 * 100000
All.states.2010$Year <- 2010
All.states.2010 <- select(All.states.2010, ICD.Chapter, State, Crude.Rate, Year)
crude.mort.2010 <- original.data %>%
filter(Year == 2010) %>%
select(ICD.Chapter, State, Crude.Rate) %>%
bind_rows(All.states.2010)
crude.mort.2010$Crude.Rate <- round(crude.mort.2010$Crude.Rate, 1)
#Dataframe for Q1
save(crude.mort.2010, file = "crude.mort.2010.Rda")
runApp()
setwd("~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3")
shiny::runApp()
load("crude.mort.2010.Rda")
load("disease.state.groups.Rda")
states <- lapply(unique(crude.mort.2010$State), as.character)
cause  <- lapply(unique(crude.mort.2010$ICD.Chapter), as.character)
mort <- crude.mort.2010
# subset
slcted <- mort[mort$State %in% in_state & mort$ICD.Chapter==in_cause,
c('ICD.Chapter','State','Year','Crude.Rate')
]
p <- ggplot(slcted, aes(x=Year, y=Crude.Rate, group=State)) +
geom_line(aes(color=State)) + xlab(in_cause)
print(p)
oad("crude.mort.2010.Rda")
load("disease.state.groups.Rda")
states <- lapply(unique(crude.mort.2010$State), as.character)
cause  <- lapply(unique(crude.mort.2010$ICD.Chapter), as.character)
mort <- crude.mort.2010
slcted <- mort[mort$State %in% in_state & mort$ICD.Chapter==in_cause,
c('ICD.Chapter','State','Year','Crude.Rate')
]
slcted <- mort[mort$State %in% "NY" & mort$ICD.Chapter==in_cause,
c('ICD.Chapter','State','Year','Crude.Rate')
]
crude.mort.2010
crude.mort.2010$ICD.Chapter == "Certain infectious and parasitic diseases"
Geo=gvisGeoMap(crude.mort.2010, locationvar="State", numvar="Crude.Rate",
options=list(region="US", dataMode="regions"))
plot(Geo)
Geo=gvisGeoMap(crude.mort.2010$ICD.Chapter == "Certain infectious and parasitic diseases", locationvar="State", numvar="Crude.Rate",
options=list(region="US", dataMode="regions"))
plot(Geo)
Geo=gvisGeoMap(crude.mort.2010, locationvar="State", numvar="Crude.Rate",
options=list(region="US", dataMode="regions"))
plot(Geo)
runApp()
a <- c(0, 2, 4, 0, 0, 0, 0, 0, 0, 0)
a
a <- c(0, 2, 4, 0, 0, 0, 0, 0, 0, 0)
b <- c(2, 0, 0, 2, 7, 0, 0, 0, 0, 0)
c <- c(4, 0, 0, 0, 4, 2, 0, 0, 0, 0)
d <- c(0, 2, 0, 0, 0, 0, 2, 0, 0, 0)
e <- c(0, 7, 4, 0, 0, 0, 1, 2, 3, 0)
f <- c(0, 0, 2, 0, 0, 0, 0, 0, 6, 0)
g <- c(0, 0, 0, 2, 1, 0, 0, 0, 0, 8)
h <- c(0, 0, 0, 0, 2, 0, 0, 0, 0, 8)
i <- c(0, 0, 0, 0, 3, 6, 0, 0, 0, 2)
j <- c(0, 0, 0, 0, 0, 0, 8, 4, 2, 0)
graph <- as.matrix(cbind(a, b, c, d, e, f, g, h, i, j))
graph
?while
;;
?as.matrix
row.names(graph) <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
gra
graph
a <- c(0, 2, 4, 0, 0, 0, 0, 0, 0, 0)
b <- c(2, 0, 0, 2, 7, 0, 0, 0, 0, 0)
c <- c(4, 0, 0, 0, 4, 2, 0, 0, 0, 0)
d <- c(0, 2, 0, 0, 0, 0, 2, 0, 0, 0)
e <- c(0, 7, 4, 0, 0, 0, 1, 2, 3, 0)
f <- c(0, 0, 2, 0, 0, 0, 0, 0, 6, 0)
g <- c(0, 0, 0, 2, 1, 0, 0, 0, 0, 8)
h <- c(0, 0, 0, 0, 2, 0, 0, 0, 0, 8)
i <- c(0, 0, 0, 0, 3, 6, 0, 0, 0, 2)
j <- c(0, 0, 0, 0, 0, 0, 8, 4, 2, 0)
graph <- as.matrix(cbind(a, b, c, d, e, f, g, h, i, j))
row.names(graph) <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")
graph
get.paths <- function(node.array){
paths <- which( node.array>0, arr.ind=TRUE)
return(paths)}
get.costs <- function(node.array){
costs <- which(node.array>0)
return(costs)}
get.paths(c(0, 0, 1, 2))
get.costs(c(0, 0, 1, 2))
?which
get.costs <- function(node.array){
costs <- which(node.array>0, arr.ind=FALSE)
return(costs)}
get.costs(c(0, 0, 1, 2))
get.costs(c(0, 0, 9, 2))
get.costs(c(5, 0, 9, 2))
which(c(0, 9, 0) != 0)
which(c(0, 9, 0) != 0, arr.ind = F)
test <- c(0, 1, 9, 3)
test[test != 0]
test[test > 0]
get.paths <- function(node.array){
paths <- which( node.array>0, arr.ind=TRUE)
return(paths)}
get.costs <- function(node.array){
costs <- node.array[node.array > 0]
return(costs)}
get.costs(test)
get.costs(graph)
get.paths(graph)
path.matrix <- cbind(get.paths(graph), get.costs(graph))
path.matrix
path.matrix <- cbind(get.paths(graph), get.costs(graph))
colnames(path.matrix) <- c("row", "col", "cost")
path.matrix
while(path.matrix[i] != 10) {i +1 ; print(path.matrix[i])}
path.matrix
path.matrix[`]
a
''
;
''''
''
]
p
[]
]
[[[]]]
''
'
path.matrix[1]
path.matrix[1,]
path.matrix[10,]
path.matrix[1,
]
path.matrix[1,1]
path.matrix[1,2]
path.matrix[1,3]
while(path.matrix[i, 1] != 10) {i +1 ; print(path.matrix[i])}
i
i = 1
while(path.matrix[i, 1] != 10) {i +1 ; print(path.matrix[i,])}
path.ma
path.matrix[,1]
library(igraph)
library(igraph)
igraph.adj <- graph.adjacency(graph, weighted=TRUE)
plot(igraph.adj)
s.paths <- shortest.paths(igraph.adj, algorithm = "dijkstra")
s.paths
plot(igraph.adj)
paths <- shortest.paths(igraph.adj, algorithm = "dijkstra")
paths
get.shortest.paths(igraph.adj, algorithm = "dijkstra")
get.shortest.paths(igraph.adj)
?get.shortest.paths
get.shortest.paths(igraph.adj, from = 1, to = 10)
get.shortest.paths(igraph.adj, from = 1, to = 10)$vpath
paths <- shortest.paths(igraph.adj, algorithm = "dijkstra")
paths
s <- c(0, 1,1,1,1, 0,0,0,0,0,0,0)
s <- c(0,1,1,1,1,0,0,0,0,0,0,0)
x1 <-c(0,0,0,0,0,1,1,0,1,1,0,0)
x2 <-c(0,0,0,0,0,0,0,1,0,0,1,0)
x3 <-c(0,0,0,0,0,1,0,1,0,0,0,0)
x4 <-c(0,0,0,0,0,1,0,1,0,0,0,0)
y1 <-c(0,1,0,1,1,0,0,0,0,0,0,0)
y2 <-c(0,1,0,0,0,0,0,0,0,0,0,0)
y3 <-c(0,0,1,1,1,0,0,0,0,0,0,0)
y4 <-c(0,1,0,0,0,0,0,0,0,0,0,0)
y5 <-c(0,1,0,0,0,0,0,0,0,0,0,0)
y6 <-c(0,0,1,0,0,0,0,0,0,0,0,0)
t <- c(0,0,0,0,0,1,1,1,1,1,1,0
max.graph <- as.matrix(cbind(s, x1,x2,x3,x4,y1,y2,y3,y4,y5,y6,t)
max.graph
s <- c(0,1,1,1,1,0,0,0,0,0,0,0)
x1 <-c(0,0,0,0,0,1,1,0,1,1,0,0)
x2 <-c(0,0,0,0,0,0,0,1,0,0,1,0)
x3 <-c(0,0,0,0,0,1,0,1,0,0,0,0)
x4 <-c(0,0,0,0,0,1,0,1,0,0,0,0)
y1 <-c(0,1,0,1,1,0,0,0,0,0,0,0)
y2 <-c(0,1,0,0,0,0,0,0,0,0,0,0)
y3 <-c(0,0,1,1,1,0,0,0,0,0,0,0)
y4 <-c(0,1,0,0,0,0,0,0,0,0,0,0)
y5 <-c(0,1,0,0,0,0,0,0,0,0,0,0)
y6 <-c(0,0,1,0,0,0,0,0,0,0,0,0)
t <- c(0,0,0,0,0,1,1,1,1,1,1,0)
max.graph <- as.matrix(cbind(s, x1,x2,x3,x4,y1,y2,y3,y4,y5,y6,t))
max.graph
s <- c(0,1,1,1,1,0,0,0,0,0,0,0)
x1 <-c(1,0,0,0,0,1,1,0,1,1,0,0)
x2 <-c(1,0,0,0,0,0,0,1,0,0,1,0)
x3 <-c(1,0,0,0,0,1,0,1,0,0,0,0)
x4 <-c(1,0,0,0,0,1,0,1,0,0,0,0)
y1 <-c(0,1,0,1,1,0,0,0,0,0,0,1)
y2 <-c(0,1,0,0,0,0,0,0,0,0,0,1)
y3 <-c(0,0,1,1,1,0,0,0,0,0,0,1)
y4 <-c(0,1,0,0,0,0,0,0,0,0,0,1)
y5 <-c(0,1,0,0,0,0,0,0,0,0,0,1)
y6 <-c(0,0,1,0,0,0,0,0,0,0,0,1)
t <- c(0,0,0,0,0,1,1,1,1,1,1,0)
max.graph <- as.matrix(cbind(s, x1,x2,x3,x4,y1,y2,y3,y4,y5,y6,t))
max.graph
adjacency <- graph.adjacency(graph, weighted=TRUE)
plot(adjacency)
max.adjacency <- graph.adjacency(max.graph, weighted=TRUE)
plot(max.adjacency)
graph.maxflow(max.graph, source = 1, target = 12)
graph.maxflow(max.adjacency, source = 1, target = 12)
graph.maxflow(max.adjacency, source = 1, target = 12)$value
setwd("~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3")
#data prep for IS608 Data Visualization Homework #3
library(readr)
library(dplyr)
original.data <- read_csv("cleaned-cdc-mortality-1999-2010.csv")
#Q1
#should be about 300 million
All.states.pop.2010 <- original.data %>%
filter(Year == 2010) %>%
select(State, Population) %>%
group_by(State) %>%
summarize(average.pop = mean(Population)) %>%
select(average.pop) %>%
sum()
All.states.2010 <- original.data %>%
filter(Year == 2010) %>%
group_by(ICD.Chapter) %>%
summarize(Deaths = sum(Deaths)) %>%
mutate(State = "US")
All.states.2010$Crude.Rate <- All.states.2010$Deaths / All.states.pop.2010 * 100000
All.states.2010$Year <- 2010
All.states.2010 <- select(All.states.2010, ICD.Chapter, State, Crude.Rate, Year)
crude.mort.2010 <- original.data %>%
filter(Year == 2010) %>%
select(ICD.Chapter, State, Crude.Rate) %>%
bind_rows(All.states.2010)
crude.mort.2010$Crude.Rate <- round(crude.mort.2010$Crude.Rate, 1)
#Dataframe for Q1
save(crude.mort.2010, file = "crude.mort.2010.Rda")
#Q2
#function to calculate US population
calc.US.pop <- function(year){
All.states.pop <- original.data %>%
filter(Year == year) %>%
select(State, Population) %>%
group_by(State) %>%
summarize(average.pop = mean(Population)) %>%
select(average.pop) %>%
sum()
return(All.states.pop)
}
#function to calculate deaths, population, and year
calc.US <- function(year){
calc.US.out <- original.data %>%
filter(Year == year) %>%
group_by(ICD.Chapter) %>%
summarize(Deaths = sum(Deaths)) %>%
mutate(State = "US")
calc.US.out$Population <- calc.US.pop(year)
calc.US.out$Crude.Rate <- calc.US.out$Deaths / calc.US.out$Population * 100000
calc.US.out$Year <- year
return(calc.US.out)
}
years <- seq(1999, 2010, 1)
US.data <- lapply(years, FUN = calc.US)
US.data <- do.call("rbind", US.data)
complete.disease.data <- original.data %>%
select(ICD.Chapter, Deaths, State, Population, Crude.Rate, Year) %>%
bind_rows(US.data)
# Define rate of change as: a slope of a linear model fit to the data for each disease by state
# Code cite: http://stackoverflow.com/questions/26765426/linear-model-and-dplyr-a-better-solution
disease.state.groups <- complete.disease.data %>%
arrange(Year) %>%
group_by(ICD.Chapter, State) %>%
do(mod = lm(Crude.Rate ~ Year, data = .)) %>%
mutate(Slope = summary(mod)$coeff[2]) %>%
select(-mod)
#Dataframe for Q2
save(disease.state.groups, file = "disease.state.groups.Rda")
#Chart 'sketches' for Shiny (to delete later)
library(googleVis)
library(ggplot2)
#ggplot(crude.mort.2010, aes)
#Chart 1
Geo=gvisGeoMap(crude.mort.2010$ICD.Chapter == "Certain infectious and parasitic diseases", locationvar="State", numvar="Crude.Rate",
options=list(region="US", dataMode="regions"))
plot(Geo)
View(crude.mort.2010)
ggplot(crude.mort.2010$ICD.Chapter=="Neoplasms", aes(x=State, y=Crude.Rate))
test.data <- crude.mort.2010[crude.mort.2010$ICD.Chapter == "Neoplasms"]
ggplot(test.data, aes(x=State, y=Crude.Rate)) + geom_bar()
test.data
crude.mort.2010$ICD.Chapter == "Neoplasms"
test.data <- where(crude.mort.2010$ICD.Chapter == "Neoplasms")
?where
test.data <- which(crude.mort.2010$ICD.Chapter == "Neoplasms")
?which
test.data
test.data <- which(crude.mort.2010$ICD.Chapter == "Neoplasms", arr.ind = F)
test.data
test.data <- filter(crude.mort.2010, ICD.Chapter = "Neoplasms")
test.data <- filter(crude.mort.2010, ICD.Chapter == "Neoplasms")
ggplot(test.data, aes(x=State, y=Crude.Rate)) + geom_bar()
test.data
View(test.data)
Geo=gvisGeoMap(test.data, locationvar="State", numvar="Crude.Rate",
options=list(region="US", dataMode="regions"))
plot(Geo)
ggplot(test.data, aes(x=State, y=Crude.Rate)) + geom_bar()
ggplot(test.data, aes(x=State, y=Crude.Rate)) + geom_bar(stat="identity")
shiny::runApp()
test.data <- filter(crude.mort.2010, ICD.Chapter %in% "Neoplasms" & State = "NY")
test.data <- filter(crude.mort.2010, ICD.Chapter %in% "Neoplasms" & State == "NY")
test.data
runApp()
Geo=gvisGeoMap(test.data, locationvar="State", numvar="Crude.Rate",
options=list(region="US", dataMode="regions"))
plot(Geo)
test.data <- filter(crude.mort.2010, ICD.Chapter %in% "Neoplasms")
ggplot(test.data, aes(x=State, y=Crude.Rate)) + geom_bar(stat="identity")
#Chart 1
Geo=gvisGeoMap(test.data, locationvar="State", numvar="Crude.Rate",
options=list(region="US", dataMode="regions"))
plot(Geo)
runApp()
runApp()
runApp()
install.packages("maps")
library(maps)
View(crude.mort.2010)
ggplot(test.data, aes(map_id = State)) +
geom_map(aes(fill = Crude.Rate), map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat)
states.maps <- map_data("state")
ggplot(test.data, aes(map_id = State)) +
geom_map(aes(fill = Crude.Rate), map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat)
ggplot(test.data, aes(map_id = State)) +
geom_map(aes(fill = Crude.Rate), map = states.map) +
expand_limits(x = states.map$long, y = states.map$lat)
states.maps <- map_data("state")
ggplot(test.data, aes(map_id = State)) +
geom_map(aes(fill = Crude.Rate), map = states.map) +
expand_limits(x = states.map$long, y = states.map$lat)
states.maps <- map_data("state")
ggplot(test.data, aes(map_id = State)) +
geom_map(aes(fill = Crude.Rate), map = states.map) +
expand_limits(x = states.map$long, y = states.map$lat)
states.map <- map_data("state")
ggplot(test.data, aes(map_id = State)) +
geom_map(aes(fill = Crude.Rate), map = states.map) +
expand_limits(x = states.map$long, y = states.map$lat)
ggplot(test.data, aes(map_id = State)) +
geom_map(aes(fill = Crude.Rate), map = states.map)
states.map
?map_data
install.packages("chloropleths")
Geo=gvisGeoMap(test.data, locationvar="State", numvar="Crude.Rate",
options=list(region="US", dataMode="regions"))
plot(Geo)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
plot.1.data <- filter(crude.mort.2010, ICD.Chapter %in% in_cause)
load("crude.mort.2010.Rda")
plot.1.data <- filter(crude.mort.2010, ICD.Chapter %in% in_cause)
gvisGeoMap(plot.1.data, locationvar="State", numvar="Crude.Rate",
options=list(region="US", dataMode="regions"))
load("crude.mort.2010.Rda")
library(dplyr)
library(googleVis)
plot.1.data <- filter(crude.mort.2010, ICD.Chapter %in% in_cause)
View(crude.mort.2010)
plot.1.data <- filter(crude.mort.2010, ICD.Chapter %in% "Neoplasms")
gvisGeoMap(plot.1.data, locationvar="State", numvar="Crude.Rate",
options=list(region="US", dataMode="regions"))
ationvar="State", numvar="Crude.Rate",
options=list(region
plot.1.data <- filter(crude.mort.2010, ICD.Chapter %in% "Neoplasms")
plot(gvisGeoMap(plot.1.data, locationvar="State", numvar="Crude.Rate",
options=list(region="US", dataMode="regions")))
shiny::runApp()
runApp()
runApp()
runApp()
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2/HW3')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
library(readr)
library(dplyr)
library(googleVis)
library(ggplot2)
library(maps)
original.data <- read_csv("cleaned-cdc-mortality-1999-2010.csv")
calc.US.pop <- function(year){
All.states.pop <- original.data %>%
filter(Year == year) %>%
select(State, Population) %>%
group_by(State) %>%
summarize(average.pop = mean(Population)) %>%
select(average.pop) %>%
sum()
return(All.states.pop)
}
#function to calculate deaths, population, and year
calc.US <- function(year){
calc.US.out <- original.data %>%
filter(Year == year) %>%
group_by(ICD.Chapter) %>%
summarize(Deaths = sum(Deaths)) %>%
mutate(State = "US")
calc.US.out$Population <- calc.US.pop(year)
calc.US.out$Crude.Rate <- calc.US.out$Deaths / calc.US.out$Population * 100000
calc.US.out$Year <- year
return(calc.US.out)
}
years <- seq(1999, 2010, 1)
US.data <- lapply(years, FUN = calc.US)
US.data <- do.call("rbind", US.data)
complete.disease.data <- original.data %>%
select(ICD.Chapter, Deaths, State, Population, Crude.Rate, Year) %>%
bind_rows(US.data)
disease.state.groups <- complete.disease.data %>%
arrange(Year) %>%
group_by(ICD.Chapter, State) %>%
do(mod = lm(Crude.Rate ~ Year, data = .)) %>%
mutate(Slope = summary(mod)$coeff[2]) %>%
select(-mod)
View(disease.state.groups)
ggplot(disease.state.groups) + geom_bar(aes(x=State, y = Slope))
ggplot(disease.state.groups) + geom_bar(aes(x=State, y = Slope), stat = "identity")
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
ggplot(plot.2.data) +
geom_bar(aes(x=State, y = Slope), stat = "identity") +
scale_fill_manual(values=c(positive="firebrick1",negative="steelblue"))
ggplot(disease.state.groups) +
geom_bar(aes(x=State, y = Slope), stat = "identity") +
scale_fill_manual(values=c(positive="firebrick1",negative="steelblue"))
ggplot(disease.state.groups) +
geom_bar(aes(x=State, y = Slope), stat = "identity") + scale_fill_manual(values=c(positive="firebrick1",negative="steelblue"))
ggplot(disease.state.groups) +
geom_bar(aes(x=State, y = Slope, fill = color), stat = "identity")
disease.state.groups$color <- ifelse(disease.state.groups$Slope < 0, "blue","red")
ggplot(disease.state.groups) +
geom_bar(aes(x=State, y = Slope, fill = color), stat = "identity")
View(disease.state.groups)
disease.state.groups$trend <- ifelse(disease.state.groups$Slope =< 0, "Improving-Trend","Worsening-Trend")
disease.state.groups$trend <- ifelse(disease.state.groups$Slope <= 0, "Improving-Trend","Worsening-Trend")
ggplot(disease.state.groups) +
geom_bar(aes(x=State, y = Slope, fill = trend), stat = "identity")
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
plot.2.data <- disease.state.groups %>%
filter(ICD.Chapter %in% in_cause) %>%
filter(State %in% in_state) %>%
factor(levels = plot.2.data$State) %>%
arrange(desc(Slope))
plot.2.data <- disease.state.groups %>%
#filter(ICD.Chapter %in% "in_cause") %>%
#filter(State %in% in_state) %>%
factor(levels = plot.2.data$State) %>%
arrange(desc(Slope))
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
disease.state.groups$State <- factor(disease.state.groups,levels=unique(disease.state.groups$State))
disease.state.groups$State <- factor(disease.state.groups,levels=(disease.state.groups$State))
str(disease.state.groups)
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
disease.state.groups$State <- as.factor(disease.state.groups,levels=(disease.state.groups$State))
disease.state.groups$State <- as.factor(disease.state.groups,levels=unique(disease.state.groups$State))
disease.state.groups$State <- as.factor(disease.state.groups)
disease.state.groups$State <- as.factor(disease.state.groups$State)
str(disease.state.groups)
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
runApp('~/Documents/Graduate School/608 - Data Visualization/IS608-DataVisualization-Assignments-Spring2016/Assignment 3/Hamski_HW3_2')
